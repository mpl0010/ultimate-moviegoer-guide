{"version":3,"sources":["api/Fetch.js","components/Search.js","components/Header.js","components/FilterBar.js","components/Overview.js","images/image.jpg","components/Movie.js","components/MovieList.js","components/PageTransition.js","App.js","reportWebVitals.js","index.js"],"names":["fetchFromAPI","formattedUrl","a","fetch","response","ok","message","status","Error","json","data","Search","setQuery","setPage","type","placeholder","onInput","e","target","value","Header","className","FilterBar","filter","setFilter","onClick","OverviewTitle","withStyles","theme","root","margin","padding","spacing","props","children","classes","disableTypography","Typography","variant","OverviewContent","MuiDialogContent","Overview","overviewOpen","setOverviewOpen","movie","handleClose","Dialog","onClose","open","id","gutterBottom","title","release_date","result","split","formatReleaseDate","dividers","overview","vote_average","Movie","imageData","useState","src","poster_path","image","moviePosterAvailable","alt","MovieList","movies","map","PageTransition","page","totalPages","disabled","App","setMovies","setTotalPages","query","setImageData","useEffect","getSearchData","getMovieData","getImageData","results","total_pages","images","base_url","poster_sizes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c6a393e4.chunk.js","sourcesContent":["/*\r\nI wanted to separate the fetch functionality from the components because I felt\r\nlike it didn't really belong. \r\nI don't see fetch as a component, more-so an action that a component might take.\r\n*/\r\n\r\n// Each fetch will require these two pieces of the url. Placing them in a variable seems cleaner.\r\nconst baseUrl = 'https://api.themoviedb.org/3/';\r\nconst apiKey = 'api_key=9fb5d4f3d51341be07d30d72bcd86ade';\r\n\r\nconst fetchFromAPI = async (formattedUrl) => {\r\n\t// We want to use our constructed url to fetch the data needed.\r\n\tconst response = await fetch(`${baseUrl}${formattedUrl}&${apiKey}`);\r\n\t\r\n\t// If the response isn't ok, we throw an error with the status.\r\n\tif (!response.ok) {\r\n\t\tconst message = `An error has occured: ${response.status}`;\r\n\t\tthrow new Error(message);\r\n\t}\r\n\r\n\t// The respose was ok so we return the response as a JSON object.\r\n\tconst data = await response.json();\r\n\treturn data;\r\n}\r\n\r\nexport default fetchFromAPI","/*\r\nThis component will be for the Search bar. A user can enter a query into the Search to find\r\na specific movie within the database.\r\n*/\r\n\r\nconst Search = ({setQuery, setPage}) => {\r\n\t// We want an input event to set our query information when it is entered. We also want the page to reset to 1.\r\n\tconst onInputEvent = e => {\r\n\t\tsetQuery(e.target.value);\r\n\t\tsetPage(1);\r\n\t}\r\n\r\n\treturn(\r\n\t\t<form>\r\n\t\t\t<input \r\n\t\t\ttype='text' \r\n\t\t\tplaceholder='Search for a movie...'\r\n\t\t\tonInput={onInputEvent}></input>\r\n\t\t</form>\r\n\t);\r\n}\r\n\r\nexport default Search","/*\r\nThis is the header of the website. This will contain text and a Search bar component.\r\n*/\r\n\r\nimport Search from './Search'\r\n\r\nconst Header = ({setQuery, setPage}) => {\r\n\t// We're going to prop drill to pass along our setSearch.\r\n\treturn (\r\n\t\t<header className=\"header\">\r\n\t\t\t<h1>Ultimate Moviegoer Guide</h1>\r\n\t\t\t<Search setQuery={setQuery} setPage={setPage}/>\r\n\t\t</header>\r\n\t)\r\n}\r\n\r\nexport default Header","/*\r\nThis component will consist of different ways to filter the movie list. I.e. Popular, Now Playing, Top Rated.\r\n*/\r\n\r\nconst FilterBar = ({filter, setFilter, setPage}) => {\r\n\t// I probably could have done inline functions within the button components to save line space.\r\n\tconst onClickNowPlaying = () => {\r\n\t\tsetFilter('now_playing');\r\n\t\tsetPage(1);\r\n\t}\r\n\r\n\tconst onClickPopular = () => {\r\n\t\tsetFilter('popular')\r\n\t\tsetPage(1);\r\n\t}\r\n\r\n\tconst onClickTopRated = () => {\r\n\t\tsetFilter('top_rated')\r\n\t\tsetPage(1);\r\n\t}\r\n\r\n\treturn(\r\n\t\t<div className='filterBar'>\r\n\t\t\t<button className='nowPlaying' onClick={onClickNowPlaying}>Now Playing</button>\r\n\t\t\t<button className='popular' onClick={onClickPopular}>Popular</button>\r\n\t\t\t<button className='topRated' onClick={onClickTopRated}>Top Rated</button>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default FilterBar","/*\r\nThis component will contain the overview of a movie that is clicked by the user.\r\nContents will be movie description, release-date, etc.\r\n\r\nThis was probably the trickiest part of the project. I attempted to create my own modal to pop up\r\nsimilar to how the current implementation works, but I couldn't get it to work exactly how I wanted it.\r\nAfter researching some alternatives I found material-ui to help with the heavy lifting. Documentation here https://material-ui.com/components/dialogs/\r\n*/\r\n\r\nimport {withStyles} from '@material-ui/core/styles'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle'\r\nimport MuiDialogContent from '@material-ui/core/DialogContent'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\n// Here we're creating some CSS to be injected into the DOM.\r\nconst styles = (theme) => ({\r\n\t// Root is the styling we're going to pass to the classNames component.\r\n\troot: {\r\n\t\tmargin: 0,\r\n\t\tpadding: theme.spacing(2),\r\n\t},\r\n});\r\n\r\n// Using the higher-order component 'withStyles' we're going to inject the custom style created above into the DOM.\r\nconst OverviewTitle = withStyles(styles)((props) => {\r\n\t// We destructure to grab the sub-components and classes.\r\n\tconst {children, classes} = props;\r\n\r\n\t// Setting our className to 'classes.root' allows us to override any styles that were applied to the component.\r\n\treturn(\r\n\t\t<MuiDialogTitle disableTypography className={classes.root}>\r\n\t\t\t<Typography variant='h6'>{children}</Typography>\r\n\t\t</MuiDialogTitle>\r\n\t);\r\n});\r\n\r\n// Using 'withStyles' again, we're going to change the theme object with our own CSS styling then immediately invoke the function.\r\nconst OverviewContent = withStyles((theme) => ({\r\n\troot: {\r\n\t\tpadding: theme.spacing(2),\r\n\t},\r\n}))(MuiDialogContent);\r\n\r\n/* \r\nThis is our Overview component. It will contain any overview information we set within the modal.\r\nPass in overviewOpen so that the Dialog can check if it is open or not. If true, Dialog is open.\r\nPass in setOverviewOpen so that we can set overviewOpen to false once we have closed the modal.\r\nPass in movie to access movie data for the contents of the modal.\r\n*/\r\nconst Overview = ({overviewOpen, setOverviewOpen, movie}) => {\r\n\t\r\n\t// To display the correct release date, we need to format the date to a more user friendly version.\r\n\tconst formatReleaseDate = (movie) => {\r\n\t\t\r\n\t\t// I tried creating a new Date from the movie.release_date and then using the getDate/getMonth/getFullYear methods\r\n\t\t// but the output was coming out with a different recorded date due to GMT format.\r\n\t\tlet {release_date} = movie;\r\n\t\trelease_date = release_date.split('-');\r\n\t\tlet result = release_date[1] + '-' + release_date[2] + '-' + release_date[0];\r\n\t\t\r\n\t\treturn `Release Date: ${result}`\r\n\t}\r\n\r\n\t// Anytime we close the modal, we want to make sure overviewOpen is false so that we'll be able to open another.\r\n\tconst handleClose = () => {\r\n\t\tsetOverviewOpen(false);\r\n\t}\r\n\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<Dialog onClose={handleClose} open={overviewOpen}>\r\n\t\t\t\t<OverviewTitle id='customized-overview-title' onClose={handleClose}>\r\n\t\t\t\t\t<Typography gutterBottom>\r\n\t\t\t\t\t\t{movie.title}\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t\t<Typography>\r\n\t\t\t\t\t\t{formatReleaseDate(movie)}\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t</OverviewTitle>\r\n\t\t\t\t<OverviewContent dividers>\r\n\t\t\t\t\t<Typography gutterBottom>\r\n\t\t\t\t\t\t{movie.overview}\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t\t<Typography>\r\n\t\t\t\t\t\tAverage User Rating: {movie.vote_average}\r\n\t\t\t\t\t</Typography>\t\t\t\t\t\r\n\t\t\t\t</OverviewContent>\r\n\t\t\t</Dialog>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Overview","export default __webpack_public_path__ + \"static/media/image.61add046.jpg\";","/*\r\nThis represents each individual movie that is pulled from the API.\r\n*/\r\n\r\nimport {useState} from 'react'\r\nimport Overview from './Overview'\r\nimport image from '../images/image.jpg'\r\n\r\n// Pass in movie to be able to access movie data. Also to prop drill to pass along the data to the Overview Dialog.\r\n// Pass in imageData to be able to construct our img src.\r\nconst Movie = ({movie, imageData}) => {\r\n\t// We want to keep track of whether or not the Overview dialog is open or not.\r\n\tconst [overviewOpen, setOverviewOpen] = useState(false);\r\n\r\n\t// I noticed when a movie didn't have a poster, a 404 was returned. So I created my own poster.\r\n\tconst moviePosterAvailable = (movie) => {\r\n\t\tlet result = movie.poster_path;\r\n\t\tif(result) {\r\n\t\t\tresult = `${imageData}${movie.poster_path}`;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tresult = `${image}`;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tconst toggleOverview = () => {\r\n\t\tsetOverviewOpen(true);\r\n\t}\r\n\t\r\n\treturn (\r\n\t\t<div className='movie' onClick={toggleOverview}>\r\n\t\t\t<img src={moviePosterAvailable(movie)} alt=''></img>\r\n\t\t\t<div className='movieTitle'>{movie.title}</div>\r\n\t\t\t{ overviewOpen ? <Overview overviewOpen={overviewOpen} setOverviewOpen={setOverviewOpen} movie={movie}/> : null }\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Movie","/*\r\nI want to create a list that will contain the movies when they are fetched.\r\n*/\r\n\r\nimport Movie from './Movie'\r\n\r\n// Pass in movies to map each movie that was pulled from the fetch.\r\n// Pass in imageData so that we can pass it to our Movie component for the img src.\r\nconst MovieList = ({ movies, imageData }) => {\r\n\treturn (\r\n\t\t<div className=\"movieList\">\r\n\t\t\t{movies.map((movie) => (\r\n\t\t\t\t<Movie key={movie.id} movie={movie} imageData={imageData}/>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default MovieList","/*\r\nThis will contain the Next page and Previous page buttons for the user to transition\r\nbetween the movie list.\r\n*/\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nconst PageTransition = ({page, setPage, totalPages}) => {\r\n\tconst onClickNextPage = () => {\r\n\t\tsetPage(page + 1);\r\n\t}\r\n\r\n\tconst onClickPreviousPage = () => {\r\n\t\tsetPage(page - 1);\r\n\t}\r\n\r\n\treturn(\r\n\t\t<div className='pageTransition'> \r\n\t\t\t<button disabled={page === 1} onClick={onClickPreviousPage}>Previous Page</button>\r\n\t\t\t<h1>{page}</h1>\r\n\t\t\t<button disabled={page === totalPages} onClick={onClickNextPage}>Next Page</button>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n// When we want to make sure the prop that is getting passed in is a certain type, we can use proptypes as a validator.\r\nPageTransition.propTypes = {\r\n\tpage: PropTypes.number,\r\n\tsetPage: PropTypes.func,\r\n\ttotalPages: PropTypes.number,\r\n}\r\n\r\nexport default PageTransition","import './index.css';\r\nimport {useState, useEffect} from 'react'\r\nimport fetchFromAPI from './api/Fetch'\r\nimport Header from './components/Header'\r\nimport FilterBar from './components/FilterBar'\r\nimport MovieList from './components/MovieList'\r\nimport PageTransition from './components/PageTransition'\r\n\r\nfunction App() {\r\n  const [movies, setMovies] = useState([]);\r\n  const [totalPages, setTotalPages] = useState([]);\r\n  const [page, setPage] = useState(1);\r\n  const [filter, setFilter] = useState('now_playing')\r\n  const [query, setQuery] = useState('');\r\n  const [imageData, setImageData] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (query) {\r\n      getSearchData(query, page);\r\n    }\r\n    else {\r\n      getMovieData(filter, page);\r\n    }\r\n    getImageData();\r\n  }, [page, filter, query])\r\n\r\n  const getMovieData = async (filter, page) => {\r\n    // We want to construct a url using the filter and page that is passed in.\r\n    const {results, total_pages} = await fetchFromAPI(`movie/${filter}?page=${page}`);\r\n    \r\n    // Set the movie list to the results returned from the promise.\r\n    setMovies(results);\r\n    // Set the total pages to the total_pages returned from the promise.\r\n    setTotalPages(total_pages);\r\n  }\r\n\r\n  const getSearchData = async (query, page) => {\r\n    // We want to construct a url using the query that the user enters in the search bar.\r\n    const {results, total_pages} = await fetchFromAPI(`search/movie?query=${query}&page=${page}`);\r\n    setMovies(results);\r\n    setTotalPages(total_pages);\r\n  }\r\n\r\n  const getImageData = async () => {\r\n    // API documentation says we need 3 parts to retrieve the movie image. By fetching the 'configuration', we can grab the base_url and the file size of our choosing.\r\n    // The 3rd piece is the movie file_path which we can grab within the movie data we already pulled. \r\n    const {images} = await fetchFromAPI('configuration?');\r\n\r\n    // We can combine the 1st piece and 2nd piece to create a url to pass to the movie list.\r\n    setImageData(`${images.base_url}${images.poster_sizes[2]}`);\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Header setQuery={setQuery} setPage={setPage}/>\r\n      <FilterBar filter={filter} setFilter={setFilter} setPage={setPage}/>\r\n      <MovieList movies={movies} imageData={imageData}/>\r\n      <PageTransition page={page} setPage={setPage} totalPages={totalPages}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}